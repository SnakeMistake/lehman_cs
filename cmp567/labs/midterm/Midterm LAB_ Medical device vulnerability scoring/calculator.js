let score = document.querySelector("#score")
let warning = document.querySelector("#warning")
let responses = {}

window.addEventListener("DOMContentLoaded", domLoaded);

function domLoaded() {
    const inputs = getInputs();
	for (let input of inputs) {
		input.addEventListener("click", updateScore);
	}
}

function updateScore() {
    const inputs = getInputs()
    let check_ct = 0
    for (let input of inputs){
        if(input.checked){
            responses[input.name] = input.value
            check_ct ++
        }
    }
    if(check_ct ==10){
        warning.style.display = "none";
        var outcome = computeScore();
        score.textContent = outcome;

    }
    // compute the vulnerability score
    // the score should be updated and siplayed inside the div with ID score
    // the score must have a minimum of 0 and a maximum of 10
    // the final score must be rounded up to the tenths decimal place and displayed with one decimal place.
    // Once the score is being displayed, updating a property will automatically update the vulnerability score
    // score = scope*(3.326258289*scorebase)+(1.1*scoreExploitability)
    // scorebase is 0.. then score final should be 0

}

function computeScore(){
    let final
    let scope
    let exploit
    let base
    let conf
    let integ
    let avail
    let vector
    let complex
    let priv
    let user_int
    console.log(responses.scope)
    console.log(responses)

    // Handle scope
    if(responses.scope=="scope_U"){
        scope = 1.0
    }else{
        scope = 1.08
    }

    // Handle conf and sens
    if(responses.conf=="conf_N"){
        conf = 0
    } else if (responses.conf =="conf_L"){
        if(responses.sens =="sens_N"){
            conf = 0.22;
        } else if (responses.sens=="sens_L"){
            conf = 0.65;
        } else {
            conf = 0.85;
        }
    }else{
        if(responses.sens == "sens_N"){
            conf = 0.56
        } else if (responses.sens == "sens_L"){
            conf = 0.75
        } else{
            conf = 0.95
        }
    }
    
    // Handle health and integ
    if(responses.integ=="integ_N"){
        if(responses.health=="health_N"){
            integ = 0
        } else if(responses.health=="health_L"){
            integ = 0.55
        } else{
            integ = 0.85
        }
    } else if (responses.integ =="integ_L"){
        if(responses.health =="health_N"){
            integ = 0.22;
        } else if (responses.health=="health_L"){
            integ = 0.60;
        } else {
            integ = 0.90;
        }
    }else{
        if(responses.health == "health_N"){
            integ = 0.56
        } else if (responses.health == "health_L"){
            integ = 0.75
        } else{
            integ = 0.95
        }
    }
    // Handle health and avail
    if(responses.avail=="avail_N"){
        if(responses.health=="health_N"){
            avail = 0
        } else if(responses.health=="health_L"){
            avail = 0.55
        } else{
            avail = 0.85
        }
    } else if (responses.avail =="avail_L"){
        if(responses.health =="health_N"){
            avail = 0.22;
        } else if (responses.health=="health_L"){
            avail = 0.60;
        } else {
            avail = 0.90;
        }
    }else{
        if(responses.health == "health_N"){
            avail = 0.56
        } else if (responses.health == "health_L"){
            avail = 0.75
        } else{
            avail = 0.95
        }
    }
    // Handle attack vector
    if(responses.AV == "AV_N"){
        vector = 0.85
    }else if (responses.AV =="AV_A"){
        vector = 0.62
    }else if(responses.AV =="AV_L"){
        vector = 0.55
    }else{
        vector = 0.20
    }

    // Handle attack complexity
    if(responses.AC =="AC_L"){
        complex = 0.77
    } else {
        complex = 0.44
    }

    // Handle privilege required
    if(responses.PR == "PR_N"){
        priv = 0.85
    }else if (responses.PR == "PR_L"){
        priv = 0.62
    }else{
        priv = 0.27
    }

    // Handle user_int
    if(responses.UI=="UI_N"){
        user_int=0.85
    } else {
        user_int = 0.62
    }


    base = conf + integ + avail
    if(base ==0){
        return 0
    }
    exploit = vector*complex*priv*user_int
    final = scope*((3.326258289*base)+1.1*exploit)
    let rounded = final.toFixed(1)
    rounded = parseFloat(rounded)
    if(final>rounded){
        rounded += 0.1
    }
    return rounded
}

function getInputs() {
	return document.querySelectorAll("input");
}